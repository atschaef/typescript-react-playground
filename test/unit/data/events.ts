import { KeyboardInputEvent, FocusInputEvent, ChangeInputEvent } from '../../../src/types/app.types'

export const eventTarget = {
  addEventListener: () => {},
  dispatchEvent: () => true,
  removeEventListener: () => {},
  blur: () => {},
}

export const changeInputEvent: ChangeInputEvent = {
  bubbles: false,
  currentTarget: eventTarget,
  cancelable: true,
  defaultPrevented: false,
  eventPhase: 1,
  isTrusted: true,
  preventDefault() {},
  isDefaultPrevented: () => true,
  stopPropagation() {},
  isPropagationStopped: () => true,
  persist() {},
  target: eventTarget,
  timeStamp: new Date().getTime(),
  type: 'focus',
  nativeEvent: null,
}

export const focusInputEvent: FocusInputEvent = {
  nativeEvent: null,
  bubbles: false,
  currentTarget: eventTarget,
  relatedTarget: eventTarget,
  cancelable: true,
  defaultPrevented: false,
  eventPhase: 1,
  isTrusted: true,
  preventDefault() {},
  isDefaultPrevented: () => true,
  stopPropagation() {},
  isPropagationStopped: () => true,
  persist() {},
  target: eventTarget,
  timeStamp: new Date().getTime(),
  type: 'focus',
}

export const keyboardEvent: KeyboardInputEvent = {
  altKey: false,
  charCode: 1,
  ctrlKey: false,
  getModifierState: (key: string) => true,
  key: 'Alphanumeric',
  keyCode: 1,
  locale: 'en-US',
  location: 1,
  metaKey: false,
  nativeEvent: null,
  repeat: false,
  shiftKey: false,
  which: 1,
  bubbles: false,
  currentTarget: eventTarget,
  cancelable: true,
  defaultPrevented: false,
  eventPhase: 1,
  isTrusted: true,
  preventDefault() {},
  isDefaultPrevented: () => true,
  stopPropagation() {},
  isPropagationStopped: () => true,
  persist() {},
  target: eventTarget,
  timeStamp: new Date().getTime(),
  type: 'focus',
}
